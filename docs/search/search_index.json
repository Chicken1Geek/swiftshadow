{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Swiftshadow is a powerful Python library designed to simplify the process of rotating IP proxies for web scraping, data mining, and other automated tasks. With its advanced features, Swiftshadow can help you overcome many of the challenges associated with web scraping, including blocked IP addresses and other forms of detection.</p> <p>One of the key benefits of Swiftshadow is its speed. The library is designed to operate quickly and efficiently, which means you can scrape data at a faster rate than with other tools. Additionally, Swiftshadow includes a built-in caching mechanism that helps to reduce the load time and improve performance.</p> <p>Another important feature of Swiftshadow is its reliability. The library is designed to be robust and resilient, which means that even if one of your proxies fails or is blocked, the system will automatically switch to another proxy to ensure continuity of your scraping process. This feature helps to ensure that your scraping efforts are not interrupted by technical issues or other problems.</p> <p>Swiftshadow is also highly customizable. You can easily configure the library to suit your specific needs, including specifying the number of proxies to use, the frequency of rotation, and other parameters. This level of flexibility makes Swiftshadow a versatile tool that can be adapted to a wide range of use cases.</p> <p>Finally, Swiftshadow has a low dependency on third-party libraries (only one), which makes it easier to use and maintain. Whether you are a seasoned developer or a novice, you can quickly get started with Swiftshadow and start scraping data with ease.</p>"},{"location":"#installation","title":"Installation","text":"<p>To get started install the library using pip. <pre><code>pip install swiftshadow\n</code></pre></p>"},{"location":"#one-class-rules-all","title":"One class rules all","text":"<p>Everything in swiftshadow is under one class for ease of use and minimal code.</p> <p>Get a proxy using just 2 lines of code! <pre><code>from swiftshadow import QuickProxy\n\nprint(QuickProxy())\n</code></pre> That was easy. </p> <p>Head to Getting Started  to get started on using this awesome library.</p> <p>Swiftshadow provides these proxies from freely available providers Proxyscrape and Scrapingant to whom i am very thankful for. Know all things about these Providers</p>"},{"location":"providers/","title":"Providers","text":""},{"location":"providers/#thank-you","title":"Thank you \ud83d\ude4f","text":"<p>Swiftshadow is a service that provides a range of proxies to users who require online privacy and security. These proxies are sourced from Proxyscrape and Scrapingant, both of which are well-known providers of free proxy lists.</p> <p>Proxyscrape is a popular web scraping service that provides free proxy lists from various sources. It is known for its reliability and the large number of proxies it offers. Scrapingant, on the other hand, specializes in enterprise-level web scraping solutions and provides high-quality proxies.</p> <p>Swiftshadow is grateful to these providers for the free proxy lists they provide. These proxies are reliable, fast, and secure, and they enable Swiftshadow to offer its users a valuable tool for online privacy and security.</p> <p>In conclusion, Swiftshadow relies on the services of Proxyscrape and Scrapingant to provide its users with a range of high-quality proxies. These providers offer reliable and secure proxy lists that allow Swiftshadow to deliver a valuable service to its users.</p>"},{"location":"providers/#providers-performance","title":"Providers Performance","text":"<p>Proxyscrape has an average load time of 14 seconds and a reliability score of 0.325602321228452, while Scrapingant has an average load time of 34 seconds and a reliability score of 0.0706746008408635. The shorter load time of Proxyscrape is an advantage, as it indicates that the proxy lists can be retrieved more quickly and efficiently. Additionally, Proxyscrape's higher reliability score suggests that their proxy lists are more accurate and up-to-date.</p> Proxy Provider Average Load Time (in seconds) Reliability Score Proxyscrape 14 0.325602321228452 Scrapingant 34 0.0706746008408635 <p>Therefore swiftshadow first tries to get proxies from Proxyscrape then from Scrapingant</p>"},{"location":"references/","title":"References","text":""},{"location":"references/#swiftshadowproxy","title":"<code>swiftshadow.Proxy</code>","text":"Source code in <code>swiftshadow\\classes.py</code> <pre><code>class Proxy:\n    def __init__(\n        self,\n        countries: list = [],\n        protocol: str = \"http\",\n        maxProxies: int = 10,\n        autoRotate: bool = False,\n        cachePeriod: int = 10,\n        cacheFolder: str = \"\",\n        debug: bool = False,\n        logToFile: bool = False,\n    ):\n        \"\"\"\n        The one class for everything.\n\n        Proxy class contains all necessary methods required to use swiftshadow.\n\n        Args:\n                countries: ISO 3166-2 Two letter country codes to filter proxies.\n                protocol: HTTP/HTTPS protocol to filter proxies.\n                maxProxies: Maximum number of proxies to store and rotate from.\n                autoRotate: Rotates proxy when `Proxy.proxy()` function is called.\n                cachePeriod: Time to cache proxies in minutes.\n                cacheFolder: Folder to store cache file.\n                debug: Sets Log Level to Debug.\n                logToFile: Whether to pipe log to a log file. If cacheFolder is set log file is saved there.\n\n        Returns:\n                proxyClass (swiftshadow.Proxy): `swiftshadow.Proxy` class instance\n\n        Examples:\n                Simplest way to get a proxy\n                &gt;&gt;&gt; from swiftshadow.swiftshadow import Proxy\n                &gt;&gt;&gt; swift = Proxy()\n                &gt;&gt;&gt; print(swift.proxy())\n                {'http':'192.0.0.1:8080'}\n        Note:\n                Proxies are sourced from **Proxyscrape** and **Scrapingant** websites which are freely available and validated locally.\n        \"\"\"\n        self.countries = [i.upper() for i in countries]\n        self.protocol = protocol\n        self.maxProxies = maxProxies\n        self.autoRotate = autoRotate\n        self.cachePeriod = cachePeriod\n        if cacheFolder == \"\":\n            self.cacheFilePath = \".swiftshadow.json\"\n        else:\n            self.cacheFilePath = f\"{cacheFolder}/.swiftshadow.json\"\n        if debug:\n            logger.setLevel(logging.DEBUG)\n        if logToFile:\n            if cacheFolder == \"\":\n                logFilePath = \"swiftshadow.log\"\n            else:\n                logFilePath = f\"{cacheFolder}/swiftshadow.log\"\n            fileHandler = logging.FileHandler(logFilePath)\n            fileHandler.setFormatter(logFormat)\n            logger.addHandler(fileHandler)\n        self.update()\n\n    def checkIp(self, ip, cc, protocol):\n        if (ip[1] == cc or cc == None) and ip[2] == protocol:\n            proxy = {ip[2]: ip[0]}\n            try:\n                oip = get(f\"{protocol}://ipinfo.io/ip\", proxies=proxy).text\n            except:\n                return False\n            if oip.count(\".\") == 3 and oip != self.mip:\n                return True\n            else:\n                return False\n        else:\n            return False\n\n    def update(self):\n        try:\n            with open(self.cacheFilePath, \"r\") as file:\n                data = load(file)\n                self.expiry = data[0]\n                expired = cache.checkExpiry(self.expiry)\n            if not expired:\n                logger.info(\n                    \"Loaded proxies from cache\",\n                )\n                self.proxies = data[1]\n                self.expiry = data[0]\n                self.current = self.proxies[0]\n                return\n            else:\n                logger.info(\n                    \"Cache expired. Updating cache.\",\n                )\n        except FileNotFoundError:\n            logger.info(\"No cache found. Cache will be created after update\")\n\n        self.proxies = []\n        self.proxies.extend(Proxyscrape(self.maxProxies, self.countries, self.protocol))\n        if len(self.proxies) != self.maxProxies:\n            self.proxies.extend(\n                Scrapingant(self.maxProxies, self.countries, self.protocol)\n            )\n        if len(self.proxies) == 0:\n            logger.warning(\n                \"No proxies found for current settings. To prevent runtime error updating the proxy list again.\",\n            )\n            self.update()\n        with open(self.cacheFilePath, \"w\") as file:\n            self.expiry = cache.getExpiry(self.cachePeriod).isoformat()\n            dump([self.expiry, self.proxies], file)\n        self.current = self.proxies[0]\n\n    def rotate(self):\n        \"\"\"\n        Rotate the current proxy.\n\n        Sets the current proxy to a random one from available proxies and also validates cache.\n\n        Note:\n                Function only for manual rotation. If `autoRotate` is set to `True` then no need to call this function.\n        \"\"\"\n        if cache.checkExpiry(self.expiry):\n            self.update()\n        self.current = choice(self.proxies)\n\n    def proxy(self):\n        \"\"\"\n        Returns a proxy dict.\n\n        Returns:\n                proxyDict (dict):A proxy dict of format `{protocol:address}`\n        \"\"\"\n        if cache.checkExpiry(self.expiry):\n            self.update()\n        if self.autoRotate == True:\n            return choice(self.proxies)\n        else:\n            return self.current\n</code></pre>"},{"location":"references/#swiftshadow.classes.Proxy.__init__","title":"<code>__init__(countries=[], protocol='http', maxProxies=10, autoRotate=False, cachePeriod=10, cacheFolder='', debug=False, logToFile=False)</code>","text":"<p>The one class for everything.</p> <p>Proxy class contains all necessary methods required to use swiftshadow.</p> <p>Parameters:</p> Name Type Description Default <code>countries</code> <code>list</code> <p>ISO 3166-2 Two letter country codes to filter proxies.</p> <code>[]</code> <code>protocol</code> <code>str</code> <p>HTTP/HTTPS protocol to filter proxies.</p> <code>'http'</code> <code>maxProxies</code> <code>int</code> <p>Maximum number of proxies to store and rotate from.</p> <code>10</code> <code>autoRotate</code> <code>bool</code> <p>Rotates proxy when <code>Proxy.proxy()</code> function is called.</p> <code>False</code> <code>cachePeriod</code> <code>int</code> <p>Time to cache proxies in minutes.</p> <code>10</code> <code>cacheFolder</code> <code>str</code> <p>Folder to store cache file.</p> <code>''</code> <code>debug</code> <code>bool</code> <p>Sets Log Level to Debug.</p> <code>False</code> <code>logToFile</code> <code>bool</code> <p>Whether to pipe log to a log file. If cacheFolder is set log file is saved there.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>proxyClass</code> <code>Proxy</code> <p><code>swiftshadow.Proxy</code> class instance</p> <p>Examples:</p> <p>Simplest way to get a proxy</p> <pre><code>&gt;&gt;&gt; from swiftshadow.swiftshadow import Proxy\n&gt;&gt;&gt; swift = Proxy()\n&gt;&gt;&gt; print(swift.proxy())\n{'http':'192.0.0.1:8080'}\n</code></pre> <p>Note:         Proxies are sourced from Proxyscrape and Scrapingant websites which are freely available and validated locally.</p> Source code in <code>swiftshadow\\classes.py</code> <pre><code>def __init__(\n    self,\n    countries: list = [],\n    protocol: str = \"http\",\n    maxProxies: int = 10,\n    autoRotate: bool = False,\n    cachePeriod: int = 10,\n    cacheFolder: str = \"\",\n    debug: bool = False,\n    logToFile: bool = False,\n):\n    \"\"\"\n    The one class for everything.\n\n    Proxy class contains all necessary methods required to use swiftshadow.\n\n    Args:\n            countries: ISO 3166-2 Two letter country codes to filter proxies.\n            protocol: HTTP/HTTPS protocol to filter proxies.\n            maxProxies: Maximum number of proxies to store and rotate from.\n            autoRotate: Rotates proxy when `Proxy.proxy()` function is called.\n            cachePeriod: Time to cache proxies in minutes.\n            cacheFolder: Folder to store cache file.\n            debug: Sets Log Level to Debug.\n            logToFile: Whether to pipe log to a log file. If cacheFolder is set log file is saved there.\n\n    Returns:\n            proxyClass (swiftshadow.Proxy): `swiftshadow.Proxy` class instance\n\n    Examples:\n            Simplest way to get a proxy\n            &gt;&gt;&gt; from swiftshadow.swiftshadow import Proxy\n            &gt;&gt;&gt; swift = Proxy()\n            &gt;&gt;&gt; print(swift.proxy())\n            {'http':'192.0.0.1:8080'}\n    Note:\n            Proxies are sourced from **Proxyscrape** and **Scrapingant** websites which are freely available and validated locally.\n    \"\"\"\n    self.countries = [i.upper() for i in countries]\n    self.protocol = protocol\n    self.maxProxies = maxProxies\n    self.autoRotate = autoRotate\n    self.cachePeriod = cachePeriod\n    if cacheFolder == \"\":\n        self.cacheFilePath = \".swiftshadow.json\"\n    else:\n        self.cacheFilePath = f\"{cacheFolder}/.swiftshadow.json\"\n    if debug:\n        logger.setLevel(logging.DEBUG)\n    if logToFile:\n        if cacheFolder == \"\":\n            logFilePath = \"swiftshadow.log\"\n        else:\n            logFilePath = f\"{cacheFolder}/swiftshadow.log\"\n        fileHandler = logging.FileHandler(logFilePath)\n        fileHandler.setFormatter(logFormat)\n        logger.addHandler(fileHandler)\n    self.update()\n</code></pre>"},{"location":"references/#swiftshadow.classes.Proxy.proxy","title":"<code>proxy()</code>","text":"<p>Returns a proxy dict.</p> <p>Returns:</p> Name Type Description <code>proxyDict</code> <code>dict</code> <p>A proxy dict of format <code>{protocol:address}</code></p> Source code in <code>swiftshadow\\classes.py</code> <pre><code>def proxy(self):\n    \"\"\"\n    Returns a proxy dict.\n\n    Returns:\n            proxyDict (dict):A proxy dict of format `{protocol:address}`\n    \"\"\"\n    if cache.checkExpiry(self.expiry):\n        self.update()\n    if self.autoRotate == True:\n        return choice(self.proxies)\n    else:\n        return self.current\n</code></pre>"},{"location":"references/#swiftshadow.classes.Proxy.rotate","title":"<code>rotate()</code>","text":"<p>Rotate the current proxy.</p> <p>Sets the current proxy to a random one from available proxies and also validates cache.</p> Note <p>Function only for manual rotation. If <code>autoRotate</code> is set to <code>True</code> then no need to call this function.</p> Source code in <code>swiftshadow\\classes.py</code> <pre><code>def rotate(self):\n    \"\"\"\n    Rotate the current proxy.\n\n    Sets the current proxy to a random one from available proxies and also validates cache.\n\n    Note:\n            Function only for manual rotation. If `autoRotate` is set to `True` then no need to call this function.\n    \"\"\"\n    if cache.checkExpiry(self.expiry):\n        self.update()\n    self.current = choice(self.proxies)\n</code></pre>"},{"location":"references/#swiftshadowquickproxy","title":"<code>swiftshadow.QuickProxy</code>","text":"<p>This function is a faster alternative to <code>Proxy</code> class. No caching is done.</p> <p>Parameters:</p> Name Type Description Default <code>countries</code> <code>list</code> <p>ISO 3166-2 Two letter country codes to filter proxies.</p> <code>[]</code> <code>protocol</code> <code>str</code> <p>HTTP/HTTPS protocol to filter proxies.</p> <code>'http'</code> <p>Returns:</p> Name Type Description <code>proxyObject</code> <code>dict</code> <p>A working proxy object.</p> Source code in <code>swiftshadow\\__init__.py</code> <pre><code>def QuickProxy(countries: list = [], protocol: str = \"http\"):\n    \"\"\"\n    This function is a faster alternative to `Proxy` class.\n    No caching is done.\n\n    Args:\n     countries: ISO 3166-2 Two letter country codes to filter proxies.\n     protocol: HTTP/HTTPS protocol to filter proxies.\n\n    Returns:\n                    proxyObject (dict): A working proxy object.\n    \"\"\"\n    try:\n        return Proxyscrape(1, countries=countries, protocol=protocol)[0]\n    except:\n        return Scrapingant(1, countries=countries, protocol=protocol)[0]\n</code></pre>"},{"location":"Getting%20Started/Using-Proxy-Class/","title":"Using Proxy Class","text":""},{"location":"Getting%20Started/Using-Proxy-Class/#basic-usage","title":"Basic Usage","text":"<p>To get a random <code>HTTP</code> proxy from any country <pre><code>from swiftshadow.classes import Proxy\nswift = Proxy()\n\nprint(swift.proxy())\n</code></pre></p> <p>Note</p> <p>When the <code>swift.Proxy</code> class instance is created for the first time the <code>Proxy.update()</code> function is called. This method updates the proxy list from Providers so it will take around 10 seconds to do so. This will also repeat after the <code>cachePeriod</code></p> <p><code>Proxy.proxy()</code> method returns a proxy in dict form. See about it in reference. This is the most basic usage of swiftshadow but wait it got more stuff.</p> <p>Note</p> <p>From now on all example will exclude the import statement for the sake of simplicity.</p>"},{"location":"Getting%20Started/Using-Proxy-Class/#filtering-proxies","title":"Filtering Proxies","text":"<p>You can filter and get proxies based on country of origin or SSL enabled (HTTPS) proxies.</p>"},{"location":"Getting%20Started/Using-Proxy-Class/#country-filter","title":"Country Filter","text":"<p>To filter proxies based on countries pass a list of countries as a two letter code when initialising the <code>swiftshadow.Proxy</code> class.</p> <ul> <li>For the list of countries and their two letter code visit this wikipedia page.</li> </ul> country filtered<pre><code>swift = Proxy(countries=['US','IN'])\n</code></pre>"},{"location":"Getting%20Started/Using-Proxy-Class/#protocol-filter","title":"Protocol Filter","text":"<p>By default all proxies are <code>HTTP</code> for SSL enabled <code>HTTPS</code> proxies set the parameter <code>protocol</code> to <code>https</code> HTTPS filter<pre><code>swift = Proxy(protocol='https')\n</code></pre></p> <p>Warning</p> <p>There is no validation done by swiftshadow on country codes or protocol as of now. This means if you pass in invalid country codes or protocol then there will be no proxies available to choose from.</p>"},{"location":"Getting%20Started/Using-Proxy-Class/#proxy-rotation","title":"Proxy Rotation","text":""},{"location":"Getting%20Started/Using-Proxy-Class/#manual-rotation","title":"Manual Rotation","text":"<p>You can manually rotate proxies using the <code>rotate()</code> method. This will choose a random proxy from available proxies. <pre><code>from swiftshadow.classes import Proxy\nswift = Proxy()\n\nprint(swift.proxy())\nswift.rotate()\nprint(swift.proxy())\n</code></pre></p>"},{"location":"Getting%20Started/Using-Proxy-Class/#auto-rotation","title":"Auto Rotation","text":"<p>Proxies can be rotated automatically by setting the parameter <code>autoRotate</code> to <code>True</code> when initialising the <code>Proxy</code> object. When auto rotate is set to true proxy is rotated everytime <code>proxy()</code> method is called. <pre><code>from swiftshadow.classes import Proxy\nswift = Proxy(autoRotate=True)\n\nprint(swift.proxy())\nprint(swift.proxy())\n</code></pre></p> <p>Visit Refrences for more information on methods.</p>"},{"location":"Getting%20Started/Using-QuickProxy/","title":"Using QuickProxy","text":"<p>For faster use cases where caching is not required <code>swiftshadow.QuickProxy</code> function is the best choice.</p> <p>This function is a faster alternative to <code>Proxy</code> class. No caching is done.</p> <p>Parameters:</p> Name Type Description Default <code>countries</code> <code>list</code> <p>ISO 3166-2 Two letter country codes to filter proxies.</p> <code>[]</code> <code>protocol</code> <code>str</code> <p>HTTP/HTTPS protocol to filter proxies.</p> <code>'http'</code> <p>Returns:</p> Name Type Description <code>proxyObject</code> <code>dict</code> <p>A working proxy object.</p> Source code in <code>swiftshadow\\__init__.py</code> <pre><code>def QuickProxy(countries: list = [], protocol: str = \"http\"):\n    \"\"\"\n    This function is a faster alternative to `Proxy` class.\n    No caching is done.\n\n    Args:\n     countries: ISO 3166-2 Two letter country codes to filter proxies.\n     protocol: HTTP/HTTPS protocol to filter proxies.\n\n    Returns:\n                    proxyObject (dict): A working proxy object.\n    \"\"\"\n    try:\n        return Proxyscrape(1, countries=countries, protocol=protocol)[0]\n    except:\n        return Scrapingant(1, countries=countries, protocol=protocol)[0]\n</code></pre> <p>You can use filters just like in <code>swiftshadow.Proxy</code> class.</p>"},{"location":"Getting%20Started/Using-QuickProxy/#example","title":"Example","text":"<pre><code>from swiftshadow import QuickProxy\n\nprint(QuickProxy())\n</code></pre>"},{"location":"Use%20Swiftshadow%20with/AWS-Lambda/","title":"AWS Lambda","text":"<p>Using swiftshadow with AWS Lambda normally would raise an error as the cache mechanism wont work properly due to the read only file permission. To fix this you can pass <code>cacheFolder=\"tmp\"</code> when creating a <code>Proxy</code> class.</p> <pre><code>from swiftshadow.classes import Proxy\n\nswift = Proxy(cacheFolder=\"tmp\")\n</code></pre> <p>If you don't want the caching behaviour try using the <code>QuickProxy</code> function.</p>"},{"location":"Use%20Swiftshadow%20with/requests/","title":"Requests","text":"<p>Swiftshadow integrates very well with <code>requests</code> library and can be used with it seamlessly.</p> <p><pre><code>from swiftshadow import QuickProxy\nfrom requests import get\n\nresp = get('https://ip.me',proxies=QuickProxy())\nprint(resp.text)\n</code></pre> Hopefully you should get a <code>ipv6</code> address that is not yours.</p>"}]}